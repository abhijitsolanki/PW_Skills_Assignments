ASSIGNMENT NO.1

Python is a programming language that is easy to understand and write, making it a popular choice among developers and programmers.
It is compatible with various programming paradigms, such as procedural, object-oriented, and functional programming.
Python has a large and active community of developers, an extensive standard library, and third-party packages for various domains.

2 Describe the role of predefined keywords in Python and provide examples of how they are used in a program .
''' words in Python Keywords are reservedthat have special meanings and cannot be used as identifiers (variable names, function names, etc.). 
Examples of keywords include if, else, while, for, def, class, import, try, except, return, True, False, None, etc.
Keywords are case-sensitive and cannot be redefined or overridden within a Python program.'''

# Examples 

# 1) True and False 
True - False 

# 2) if and else 
x = 16 
if x>5:
    print("x is grater than 5 ")
else:
    print("the no is less than 5")
    
# 3) & and or
True & False 

True or False 

# 4) while 
row = 1
while row <= 4:
    col = 1
    while col <= row:
        print("*",end="")
        col = col+1
    print()
    row = row +1 
    
# 5) if else 
x = 7
y = 6 
if x>5:
    if y>5:
        print("both x and y is greater than 5")
    else:
        print("x is greater than 5 but y is less than 5 ")
else :
        print("x is not grater than 5 ")
        
# 6) while ,if else ,break
n = 7
i = 1
while i<n:
    i = i+1 
    if i == 3:
        break
    print(i)
    
else:
        print("this will be execute when the while is run successfuly without any break")
        
# 7) while , if ,else ,continue
n = 7
i = 1
while i<n:
    i = i+1 
    if i == 3:
        continue
    print(i)
    
else:
        print("this will be execute when the while is run successfuly without any break")

# 7) if ,elif ,else 
a = 100
if a > 100 :
    print("this block will be executed if a is grater than 100")
elif a < 100:
    print("this block will be executed if a is lesser than 100")
else:
    print("the number is equal to 100")
    
# 8) for 
a = "Abhijit"
for i in a:
    print(i)
x is grater than 5 
*
**
***
****
both x and y is greater than 5
2
2
4
5
6
7
this will be execute when the while is run successfuly without any break
the number is equal to 100
A
b
h
i
j
i
t
x is grater than 5 
*
**
***
****
both x and y is greater than 5
2
2
4
5
6
7
this will be execute when the while is run successfuly without any break
the number is equal to 100
A
b
h
i
j
i
t
3. Compare and contrast mutable and immutable objects in pythin with examples .
#Mutability & Immutability.

'''In Python, objects can be categorized into two main types based on their mutability: mutable and immutable.
Understanding the differences between these types is crucial for programming efficiently and correctly. Let's explore each type with examples:

### Immutable Objects

Immutable objects in Python cannot be changed once they are created. Any operation that appears to modify an immutable object actually creates a new object with the modified value.
Immutable objects are safer to share across multiple parts of a program because they cannot be changed inadvertently.

Examples of immutable objects in Python include:'''
'''1. **integers**
2. **floats**
3. **tuples**
4. **strings**'''

#### Examples:

 #1. Integers:
   
   a = 5
   a += 1  # This creates a new integer object with value 6, a is not modified
   print(a)  # Output: 6
   

 # 2. #Strings:**
   
   s = "Hello"
   s += " World"  # This creates a new string object "Hello World", s is not modified
   print(s)  # Output: Hello World
   

 #3. Tuples:**
   
   t = (1, 2, 3)
   t += (4,)  # This creates a new tuple (1, 2, 3, 4), t is not modified
   print(t)  # Output: (1, 2, 3, 4)
   

### Mutable Objects

'''Mutable objects in Python can be changed or modified after they are created.
This means the object's state or contents can be modified, added to, or removed from without creating a new object.

Examples of mutable objects in Python include:
1. **lists**
2. **dictionaries**
3. **sets**'''

# Examples:
list_cont = [1,2,3,4.3,(3+5j),True,"abhijit"]

   

 #2. **Dictionaries:**
   ```python
   d = {'a': 1, 'b': 2}
   d['c'] = 3  # Modifies the existing dictionary by adding a new key-value pair
   print(d)  # Output: {'a': 1, 'b': 2, 'c': 3}
   ```


### Comparison:

'''- **Mutability:** Immutable objects cannot be changed once they are created, while mutable objects can be modified after creation.
- **Memory Efficiency:** Immutable objects require more memory allocation when a modification is made because a new object is created.
Mutable objects may be more memory-efficient when frequent modifications are needed.
- **Safety:** Immutable objects are safer to use in multithreaded applications or concurrent programming because
their state cannot be changed once created, reducing the risk of unexpected side effects.'''

### Summary:

#Understanding whether an object in Python is mutable or immutable is important for determining how you can manipulate it and how it behaves in different contexts within your program.
#Immutable objects provide safety and predictability, while mutable objects offer flexibility and potentially better performance in certain scenarios.
 4. Discuss the different types of operators in Python and provide examples of how they are used.
'''In Python, operators are special symbols or keywords that perform operations on variables and values. 
They can be categorized into several types based on their functionality.
Let's discuss each type of operator with examples of how they are used:
1. Arithmetic Operators
2. Comparison Operators 
3. logical operators 
4. assignment operators 
5. bitwise operators 
6. identity operators'''

# addition "+"
a = 5 
b = 7 
a + b  

# subtraction"-"
a = 5 
b = 7 
a- b 

# multiplication "*"
a = 5 
b = 7 
a*b 

#division 
a = 5 
b = 7 
a/b 

#logical And 
a = True
b = False
result = (a and b)  # result = False 

# logical or 
a = True
b = False
result = (a or b)  # result = True

# bitwise 
a = 5  # binary 101
b = 3  # binary 011
result = a | b  # result = 7 (binary 111)
#5 explain the concept of type casting in Python with examples .
'''In Python, type casting refers to the process of converting a variable from one data type to another.
This can be necessary when you want to perform operations that are only valid for certain types, or when you need to store the data in a different format.
Python provides several built-in functions for type casting:'''

# Converting int to float
x = 10
y = float(x)
print(y)  # Output: 10.0

# Converting float to int (note that this truncates towards zero)
a = 15.6
b = int(a)
print(b)  # Output: 15

# Converting int/float to string
num = 123
str_num = str(num)
print(str_num)  # Output: '123'

# Converting integer to boolean
value = 10
bool_value = bool(value)
print(bool_value)  # Output: True

# Converting zero (or empty containers) to boolean
empty_list = []
bool_empty_list = bool(empty_list)
print(bool_empty_list)  # Output: False

# Using int() constructor to convert string to integer
str_num = "100"
int_num = int(str_num)
print(int_num)  # Output: 100

# Using float() constructor to convert string to float
str_float = "3.14"
float_num = float(str_float)
print(float_num)  # Output: 3.14

'''Key Points:
Type casting in Python is generally implicit due to its dynamic typing, but explicit conversions are sometimes necessary.
Python provides built-in functions (int(), float(), str(), etc.) and constructors (list(), tuple(), dict(), etc.) for type casting between compatible types.
Custom type conversions can be defined using class methods or special methods (__int__, __float__, __str__, etc.) depending on the context.
Understanding how and when to use type casting is crucial for manipulating data effectively and ensuring compatibility between different parts of your Python program.'''
10.0
15
123
True
False
100
3.14

6. How do conditional statements work in Python ? Illustrate with examples .

'''Conditional statements in Python allow you to make decisions in your code based on whether certain conditions are true or false.
These statements control the flow of execution by evaluating expressions and executing specific blocks of code depending on whether the conditions are met.
The main conditional statements in Python are if, elif (short for "else if"), and else.'''

#Basic Syntax and Examples:

# Example 1: Simple if statement
x = 10
if x > 5:
    print("x is greater than 5")

# Example 2: if-else statement
y = 3
if y % 2 == 0:
    print("y is even")
else:
    print("y is odd")

# Example 3: if-elif-else statement
grade = 75

if grade >= 90:
    print("A")
elif grade >= 80:
    print("B")
elif grade >= 70:
    print("C")
elif grade >= 60:
    print("D")
else:
    print("F")
    
x is greater than 5
y is odd
C
7. Describe the different types of loops in Python and their use cases with examples.

'''In Python, loops are used to repeatedly execute a block of code until a certain condition is met.
Python supports several types of loops, each suited for different scenarios and conditions.
The main types of loops in Python are for loops, while loops, and nested loops.'''

# Example 1: Iterating over a list
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)

    
# Example 2: Iterating over a range of numbers
for i in range(1, 5):
    print(i)
    
# Example 3: Simple while loop
count = 0
while count < 5:
    print(count)
    count += 1


# Example 4: Nested loops
for i in range(1, 4):
    for j in range(1, 4):
        print(f"({i}, {j})")

apple
banana
cherry
1
2
3
4
0
1
2
3
4
(1, 1)
(1, 2)
(1, 3)
(2, 1)
(2, 2)
(2, 3)
(3, 1)
(3, 2)
(3, 3)


 
    


